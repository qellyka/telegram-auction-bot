import asyncio

from aiogram import F, Router, types

import re

from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

from app.middlewares import UserDBCheckMiddleware

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.db.requests as rq

from app.filters import IsAdmin, IsAdminCb

import app.admin.keyboards as kb

from config import CHANNEL_ID, BOT_ID, status_mapping

admin_router = Router()

admin_router.message.outer_middleware(UserDBCheckMiddleware())

class ManageUser(StatesGroup):
    username = State()

@admin_router.message(IsAdmin(), Command("menu"))
async def menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã  —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é. üõ†", reply_markup=kb.admin_menu)

@admin_router.message(IsAdmin(), F.text == "üõ†Ô∏è–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def tech_channel(message: Message):
    await message.answer(text="‚ÅâÔ∏è–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π‚ÅâÔ∏è",
                         reply_markup=kb.tech_channel_menu)

@admin_router.message(IsAdmin(), F.text == "üÉè–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
async def view_black_list(message: Message):
    users = await rq.get_blocked_users()
    if users:
        await message.answer(text="–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
        for user in users:
            await message.answer(f"{user['username']}")
    else:
        await message.answer(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

@admin_router.message(IsAdmin(), F.text == "ü™™–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: Message, state: FSMContext):
    await state.set_state(ManageUser.username)
    await message.answer("üßë‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @).",
                         reply_markup=kb.interrupt_work)

@admin_router.message(IsAdmin(), ManageUser.username)
async def manage_users_state(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    data = await state.get_data()
    user = await rq.get_user_by_username(data["username"])
    if user and not(user.is_admin):
        if user.is_banned:
            await message.answer(text=f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.username} \n"
                                      f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤:  {user.lots} \n"
                                      f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.balance}‚≠ê \n",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                [InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                                      callback_data=f"unban_user_{user.telegram_id}")],
                                                [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                                      callback_data=f"user_lots_{user.telegram_id}")],
                                                [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                                                      url=f"tg://user?id={user.telegram_id}")],
                                 ])
                                 )
            await state.clear()
        else:
            await message.answer(text=f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.username} \n"
                                      f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤:  {user.lots} \n"
                                      f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.balance}‚≠ê \n",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                           callback_data=f"ban_user_{user.telegram_id}")],
                                     [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                           callback_data=f"user_lots_{user.telegram_id}")],
                                     [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                                           url=f"tg://user?id={user.telegram_id}")],
                                 ])
                                 )
            await state.clear()
    elif user and user.is_admin:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚ùå")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω ‚ùå")


@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^ban_user_\d+$", cb.data))
async def ban_user(cb: CallbackQuery):
    tg_id = int(cb.data.split("_")[-1])
    await rq.ban_user(tid=tg_id)
    await cb.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")
    await cb.bot.send_message(chat_id=tg_id,
                              text="üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã üö´ \n–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.‚ùóÔ∏è",
                              reply_markup=kb.tech_bot_menu)

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^unban_user_\d+$", cb.data))
async def ban_user(cb: CallbackQuery):
    tg_id = int(cb.data.split("_")[-1])
    await rq.unban_user(tid=tg_id)
    await cb.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    await cb.bot.send_message(chat_id=tg_id,
                              text="‚ùóÔ∏è–í—ã –±—ã–ª–∏ —Ä–∞–∑–∞–±–Ω–µ–Ω—ã‚ùóÔ∏è\n‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–Ω—É –Ω–∞–≤—Å–µ–≥–¥–∞! –°–æ–≤–µ—Ç—É–µ–º —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞. ")


@admin_router.message(IsAdmin(), F.text == "üé´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –ª–æ—Ç—ã")
async def new_lots_menu(message: Message):
    lot = await rq.get_first_new_lot()
    if lot:
        seller = await rq.get_user_data(lot.seller)
        await message.answer_photo(photo=lot.photo_id,
                                   caption=f"–õ–æ—Ç: <b>#{lot.id}</b>\n"
                                           f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{lot.starter_price}</b>üåü\n"
                                           f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price}</b>üåü\n"
                                           f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price + 1}</b>üåü\n"
                                           f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{lot.moment_buy_price}</b>üåü\n"
                                           f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{seller.name}</b>\n"
                                           f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{lot.expired_at.strftime('%d.%m.%Y %H:%M')}</b> (MSK)\n",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                    [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                                                          callback_data=f"approve_lot_{lot.id}")],
                                                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                                          callback_data=f"reject_lot_{lot.id}")],
                                                    [InlineKeyboardButton(text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–æ—Ç",
                                                                          callback_data=f"prev_lot_{lot.id}"),
                                                     InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ª–æ—Ç",
                                                                          callback_data=f"next_lot_{lot.id}")],
                                                    [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                                    callback_data="end_moderation")]]),
                                   parse_mode="HTML")
    else:
        await message.answer("üôÖ –ù–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç.")

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^approve_lot_\d+$", cb.data))
async def approve_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    await rq.approve_lot(lot_id=lot_id)
    lot = await rq.get_lot_data(lot_id=lot_id)
    user = await rq.get_user_data_id(lot.user_id)
    seller = await rq.get_user_data(lot.seller)
    message = await cb.bot.send_photo(chat_id=f"@{CHANNEL_ID}",
                                      photo=lot.photo_id,
                                      caption=f"–õ–æ—Ç: <b>#{lot.id}</b>\n"
                                              f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{lot.starter_price}</b>üåü\n"
                                              f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price + 1}</b>üåü\n"
                                              f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{lot.moment_buy_price}</b>üåü\n"
                                              f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{seller.name}</b>\n"
                                              f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{lot.expired_at.strftime('%d.%m.%Y %H:%M')}</b> (MSK)\n"
                                              f"–°—Ç–∞—Ç—É—Å: <b>{status_mapping.get(lot.status.value)}</b>",
                                      parse_mode="HTML",
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ",
                                                                url=f"https://t.me/{BOT_ID}?start={lot.uuid}")]
                                      ])
                            )
    await cb.answer("–õ–æ—Ç #" + str(lot_id) + " –æ–¥–æ–±—Ä–µ–Ω.")
    await cb.bot.send_message(chat_id=user.telegram_id,
                                        text=f"‚úÖ –í–∞—à –ª–æ—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n"
                                             f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ª–æ—Ç : https://t.me/{CHANNEL_ID}/{message.message_id}")
    await rq.set_message_id(lot_id, message.message_id)
    next_lot = await rq.get_next_lot(lot_id)
    if next_lot:
        nx_user = await rq.get_user_data(next_lot.seller)
        await cb.message.edit_media(media=InputMediaPhoto(
            media=next_lot.photo_id,
            caption=f"–õ–æ—Ç: <b>#{next_lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{next_lot.starter_price}</b>üåü\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{next_lot.real_price + 1}</b>üåü\n"
                    f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{next_lot.moment_buy_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{nx_user.name}</b>\n"
                    f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{next_lot.expired_at.strftime('%Y-%m-%d %H:%M:%S')}</b> (MSK)\n",
            parse_mode="HTML")
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                  callback_data=f"approve_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                  callback_data=f"reject_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–æ—Ç",
                                  callback_data=f"prev_lot_{next_lot.id}"),
             InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ª–æ—Ç",
                                  callback_data=f"next_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                  callback_data="end_moderation")]])
        await cb.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await cb.message.delete()
        msg = await cb.message.answer("üéâ –í—Å–µ –ª–æ—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")
        await asyncio.sleep(3)
        await msg.delete()

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^reject_lot_\d+$", cb.data))
async def reject_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id=lot_id)
    user = await rq.get_user_data_id(lot.user_id)
    await rq.reject_lot(lot_id=lot_id)
    await cb.answer("–õ–æ—Ç ‚Ññ" + str(lot_id) + " –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    await cb.bot.send_message(chat_id=user.telegram_id,
                              text="–í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                              reply_markup=kb.tech_bot_menu)
    next_lot = await rq.get_next_lot(lot_id)
    if next_lot:
        nx_user = await rq.get_user_data(next_lot.seller)
        await cb.message.edit_media(media=InputMediaPhoto(
            media=next_lot.photo_id,
            caption=f"–õ–æ—Ç: <b>#{next_lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{next_lot.starter_price}</b>üåü\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{next_lot.real_price + 1}</b>üåü\n"
                    f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{next_lot.moment_buy_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{nx_user.name}</b>\n"
                    f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{next_lot.expired_at.strftime('%Y-%m-%d %H:%M:%S')}</b> (MSK)\n",
            parse_mode="HTML")
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                  callback_data=f"approve_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                  callback_data=f"reject_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–æ—Ç",
                                  callback_data=f"prev_lot_{next_lot.id}"),
            InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ª–æ—Ç",
                                  callback_data=f"next_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                  callback_data="end_moderation")]])
        await cb.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await cb.message.edit_text("üéâ –í—Å–µ –ª–æ—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã! –ù–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ –Ω–µ—Ç.")

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^next_lot_\d+$", cb.data))
async def reject_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    next_lot = await rq.get_next_lot(lot_id)
    if next_lot:
        nx_user = await rq.get_user_data(next_lot.seller)
        await cb.message.edit_media(media=InputMediaPhoto(
            media=next_lot.photo_id,
            caption=f"–õ–æ—Ç: <b>#{next_lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{next_lot.starter_price}</b>üåü\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{next_lot.real_price + 1}</b>üåü\n"
                    f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{next_lot.moment_buy_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{nx_user.name}</b>\n"
                    f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{next_lot.expired_at.strftime('%d.%m.%Y %H:%M')}</b> (MSK)\n",
            parse_mode="HTML")
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                  callback_data=f"approve_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                  callback_data=f"reject_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–æ—Ç",
                                  callback_data=f"prev_lot_{next_lot.id}"),
            InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ª–æ—Ç",
                                  callback_data=f"next_lot_{next_lot.id}")],
            [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                  callback_data="end_moderation")]])
        await cb.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await cb.answer("–í—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–æ—Ç—ã –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ.")

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r"^prev_lot_\d+$", cb.data))
async def reject_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    prev_lot = await rq.get_previous_lot(lot_id)
    if prev_lot:
        await cb.message.edit_media(media=InputMediaPhoto(
            media=prev_lot.photo_id,
            caption=f"–õ–æ—Ç: <b>#{prev_lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{prev_lot.starter_price}</b>üåü\n"
                    f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{prev_lot.real_price + 1}</b>üåü\n"
                    f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{prev_lot.moment_buy_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{prev_lot.seller}</b>\n"
                    f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{prev_lot.expired_at.strftime('%d.%m.%Y %H:%M')}</b> (MSK)\n",
            parse_mode="HTML")
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                  callback_data=f"approve_lot_{prev_lot.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                  callback_data=f"reject_lot_{prev_lot.id}")],
            [InlineKeyboardButton(text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–æ—Ç",
                                  callback_data=f"prev_lot_{prev_lot.id}"),
            InlineKeyboardButton(text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ª–æ—Ç",
                                  callback_data=f"next_lot_{prev_lot.id}")],
            [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                  callback_data="end_moderation")]])
        await cb.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await cb.answer("–í—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–æ—Ç—ã –ø–µ—Ä–µ–¥ –¥–∞–Ω–Ω—ã–º.")

@admin_router.callback_query(IsAdminCb(), F.data == "end_moderation")
async def end_moderation(cb: CallbackQuery):
    await cb.message.delete()
    msg = await cb.message.answer("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã.")
    await asyncio.sleep(5)
    await msg.delete()

@admin_router.callback_query(IsAdminCb(), F.data == "interrupt_work")
async def interrupt_work(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await state.clear()
    new_message = await cb.message.answer("–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—É!")
    await asyncio.sleep(5)
    await new_message.delete()
