from aiogram import F, Router, types

import re

from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.util import await_only

from app.middlewares import UserDBCheckMiddleware

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.db.requests as rq

from app.filters import IsAdmin, IsAdminCb

import app.admin.keyboards as kb

admin_router = Router()

admin_router.message.outer_middleware(UserDBCheckMiddleware())

class ManageUser(StatesGroup):
    username = State()

@admin_router.message(IsAdmin(), Command('menu'))
async def menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã  —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é. üõ†', reply_markup=kb.admin_menu)

@admin_router.message(IsAdmin(), F.text == 'üõ†Ô∏è–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def tech_channel(message: Message):
    await message.answer(text='‚ÅâÔ∏è–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π‚ÅâÔ∏è',
                         reply_markup=kb.tech_channel_menu)

@admin_router.message(IsAdmin(), F.text == 'üé´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –ª–æ—Ç—ã')
async def view_new_lots(message: Message):
    lots = await rq.get_new_lots()
    if lots:
        for lot in lots:
            await message.answer_photo(photo=lot['photo_id'],
                                       caption=f'–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot["starter_price"]}‚≠ê\n'
                                               f'–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: {lot["moment_buy_price"]}‚≠ê\n'
                                               f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {lot["seller"]}\n'f''
                                               f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞: {lot['expired_time']}\n',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                            [InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å –ª–æ—Ç',
                                                                                  callback_data=f'approve_lot_{lot["id"]}')],
                                                            [InlineKeyboardButton(text='–û–∫–ª–æ–Ω–∏—Ç—å –ª–æ—Ç\n',
                                                                                  callback_data=f'reject_lot_{lot["id"]}')],
                                                    ])
                                       )
    else:
        await message.answer('üôÖ –ù–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç. ')


@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r'^approve_lot_\d+$', cb.data))
async def approve_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split('_')[-1])
    await rq.approve_lot(lot_id=lot_id)
    lot = await rq.get_lot_data(lot_id=lot_id)
    user = await rq.get_user_data_id(lot.user_id)
    message = await cb.bot.send_photo(chat_id='@auction_saharok',
                            photo=lot.photo_id,
                            caption=f'–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot.starter_price}‚≠ê\n'
                                    f'–¶–µ–Ω–∞ –ø–µ—Ä–µ–±–∏–≤–∫–∏: {lot.real_price + lot.real_price / 100 * 5}‚≠ê\n'
                                    f'–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: {lot.moment_buy_price}‚≠ê\n'
                                    f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {lot.seller}\n'f''
                                    f'–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {lot.expired_at.strftime("%Y-%m-%d %H:%M:%S")}\n',
                              )
    await cb.answer('–õ–æ—Ç ‚Ññ' + str(lot_id) + ' –æ–¥–æ–±—Ä–µ–Ω.')
    await cb.message.delete()
    await cb.bot.send_message(chat_id=user.telegram_id,
                                        text='‚úÖ –í–∞—à –ª–æ—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.\n'
                                             f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ª–æ—Ç üîó : https://t.me/auction_saharok/{message.message_id}')

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r'^reject_lot_\d+$', cb.data))
async def reject_lot(cb: CallbackQuery):
    lot_id = int(cb.data.split('_')[-1])
    lot = await rq.get_lot_data(lot_id=lot_id)
    user = await rq.get_user_data_id(lot.user_id)
    await rq.reject_lot(lot_id=lot_id, tg_id=cb.from_user.id)
    await cb.answer('–õ–æ—Ç ‚Ññ' + str(lot_id) + ' –æ—Ç–∫–ª–æ–Ω–µ–Ω.')
    await cb.message.delete()
    await cb.bot.send_message(chat_id=user.telegram_id,
                              text='–í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                              reply_markup=kb.tech_bot_menu)

@admin_router.message(IsAdmin(), F.text == 'ü™™–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
async def manage_users(message: Message, state: FSMContext):
    await state.set_state(ManageUser.username)
    await message.answer('üßë‚Äçüíª –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @).')

@admin_router.message(IsAdmin(), ManageUser.username)
async def manage_users_state(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    data = await state.get_data()
    user = await rq.get_user_by_username(data['username'])
    if user and not(user.is_admin):
        if user.is_banned:
            await message.answer(text=f'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.username} \n'
                                      f'üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤:  {user.lots} \n'
                                      f'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.balance}‚≠ê \n',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                [InlineKeyboardButton(text='–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                                      callback_data=f'unban_user_{user.telegram_id}')],
                                                [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                                      callback_data=f'user_lots_{user.telegram_id}')],
                                                [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                                                                      url=f"tg://user?id={user.telegram_id}")],
                                 ])
                                 )
            await state.clear()
        else:
            await message.answer(text=f'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.username} \n'
                                      f'üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤:  {user.lots} \n'
                                      f'üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {user.balance}‚≠ê \n',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(text='–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                           callback_data=f'ban_user_{user.telegram_id}')],
                                     [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                           callback_data=f'user_lots_{user.telegram_id}')],
                                     [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                                                           url=f"tg://user?id={user.telegram_id}")],
                                 ])
                                 )
            await state.clear()
    elif user and user.is_admin:
        await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚ùå')
    else:
        await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω ‚ùå')


@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r'^ban_user_\d+$', cb.data))
async def ban_user(cb: CallbackQuery):
    tg_id = int(cb.data.split('_')[-1])
    await rq.ban_user(tid=tg_id)
    await cb.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.')
    await cb.bot.send_message(chat_id=tg_id,
                              text='üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã üö´ \n–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.‚ùóÔ∏è',
                              reply_markup=kb.tech_bot_menu)

@admin_router.callback_query(IsAdminCb(), lambda cb: re.match(r'^unban_user_\d+$', cb.data))
async def ban_user(cb: CallbackQuery):
    tg_id = int(cb.data.split('_')[-1])
    await rq.unban_user(tid=tg_id)
    await cb.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.')
    await cb.bot.send_message(chat_id=tg_id,
                              text='‚ùóÔ∏è–í—ã –±—ã–ª–∏ —Ä–∞–∑–∞–±–Ω–µ–Ω—ã‚ùóÔ∏è\n‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–Ω—É –Ω–∞–≤—Å–µ–≥–¥–∞! –°–æ–≤–µ—Ç—É–µ–º —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞. ')






