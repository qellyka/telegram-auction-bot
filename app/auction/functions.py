import asyncio
import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot
from sqlalchemy import select

from app.db.engine import async_session
from app.db.models import LotBase, LotStatus, LotModStatus
import app.db.requests as rq
from config import CHANNEL_ID, status_mapping, BOT_ID


async def check_expired_lots(bot: Bot):
    async with async_session() as session:
        now = datetime.datetime.now(ZoneInfo("Europe/Moscow")).replace(tzinfo=None)

        expired_lots = await session.scalars(
            select(LotBase)
            .where(
                LotBase.status == LotStatus.TRADING,
                LotBase.is_post == LotModStatus.APPROVED,
                LotBase.expired_at < now
            )
        )

        tasks = []

        for lot in expired_lots:
            tasks.append(process_lot(lot, bot))

        if tasks:
            await asyncio.gather(*tasks)
            await session.commit()

async def process_lot(lot: LotBase, bot: Bot):
    winner = await rq.get_user_data(lot.applicant)
    seller = await rq.get_user_data(lot.seller)
    if winner:
        lot.status = LotStatus.SOLD
        lot.buyer = winner.telegram_id
        await bot.send_message(chat_id=winner.telegram_id,
                         text=f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç #{lot.id} –ø–æ–±–µ–¥–∏–ª–∞. –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ @{seller.username} –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫, "
                              f"–µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–æ—Ä.")
        await bot.send_message(chat_id=lot.seller,
                               text=f'–í–∞—à –ª–æ—Ç #{lot.id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í –Ω–µ–º –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å @{winner.username}. –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, '
                                    f'–µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä –∏ –≤–µ—Ä–Ω—É—Ç—å –∑–≤–µ–∑–¥—ã, –∞ –≤–∞—Å –∑–∞–±–∞–Ω—è—Ç!')
        await bot.edit_message_caption(
            chat_id=f"@{CHANNEL_ID}",
            message_id=lot.message_id,
            caption=f"–õ–æ—Ç: <b>#{lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{lot.starter_price}</b>üåü\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{seller.name}</b>\n"
                    f"–°—Ç–∞—Ç—É—Å: <b>{status_mapping.get(lot.status.value, "None")}</b>\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{winner.name}</b>",
            parse_mode="HTML",
        )

    else:
        lot.status = LotStatus.EXPIRED
        await bot.send_message(chat_id=lot.seller,
                               text=f'–í–∞—à –ª–æ—Ç #{lot.id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù–∞ –Ω–µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏.')
        await bot.edit_message_caption(
            chat_id=f"@{CHANNEL_ID}",
            message_id=lot.message_id,
            caption=f"–õ–æ—Ç: <b>#{lot.id}</b>\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{lot.starter_price}</b>üåü\n"
                    f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{lot.moment_buy_price}</b>üåü\n"
                    f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{seller.name}</b>\n"
                    f"–°—Ç–∞—Ç—É—Å: <b>{status_mapping.get(lot.status.value, "None")}</b>\n",
            parse_mode="HTML",
        )

async def background_tasks(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ—Ç–æ–≤"""
    while True:
        await check_expired_lots(bot)
        await asyncio.sleep(60)

