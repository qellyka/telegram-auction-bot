from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from app.db.models import LotStatus
import app.db.requests as rq

from config import BOT_ID, CHANNEL_ID, status_mapping

import app.user.keyboards as kb

async def bid_lot(lot, bid: int, cb: CallbackQuery, lot_id: int, user_id: int):
    lot_seller = await rq.get_user_data_id(lot.user_id)
    user = await rq.get_user_data(user_id)

    if lot.status == LotStatus.SOLD:
        await cb.answer()
        await cb.message.delete()
        await cb.message.answer("–õ–æ—Ç —É–∂–µ –≤—ã–∫—É–ø–ª–µ–Ω.")
        return

    elif lot.status == LotStatus.EXPIRED:
        await cb.answer()
        await cb.message.delete()
        await cb.message.answer("–õ–æ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª.")
        return

    elif lot_seller.telegram_id == user_id:
        await cb.answer()
        await cb.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ—Ç.")
        return

    elif user.balance < lot.real_price + bid:
        await cb.answer()
        await cb.message.answer("üí∞–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥‚≠ê, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
                                reply_markup=kb.profile_menu)
        return

    applicant = await rq.get_lot_applicant(lot_id)

    if applicant == user_id:
        await cb.answer()
        await cb.message.answer("‚åõÔ∏è–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –µ—ë –ø–µ—Ä–µ–±—å—é—Ç  –∏–ª–∏ –∫—É–ø–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ‚åõÔ∏è")
        return

    if applicant and applicant != user_id:
        await cb.bot.send_message(
         chat_id=applicant,
         text=f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç #{lot.id} –±—ã–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞‚ùóÔ∏è–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Åüí∞"
        )
        await rq.increase_balance(applicant, lot.real_price)

    await rq.set_lot_applicant(lot_id, user_id)
    await rq.set_new_lot_price(lot_id, bid)

    lot = await rq.get_lot_data(lot_id)
    await cb.answer()
    await rq.decrease_balance(user_id, lot.real_price)
    await cb.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É!")
    await cb.bot.edit_message_caption(
        chat_id=f"@{CHANNEL_ID}",
        message_id=lot.message_id,
        caption=f"–õ–æ—Ç: <b>#{lot.id}</b>\n"
                f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{lot.starter_price}</b>üåü\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price}</b>üåü\n"
                f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{lot.real_price + 1}</b>üåü\n"
                f"–¶–µ–Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: <b>{lot.moment_buy_price}</b>üåü\n"
                f"–ü—Ä–æ–¥–≤–µ—Ü: <b>{lot_seller.name}</b>\n"
                f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{lot.expired_at.strftime('%d.%m.%Y %H:%M')}</b> (MSK)\n"
                f"–°—Ç–∞—Ç—É—Å: <b>{status_mapping.get(lot.status.value, "None")}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
         inline_keyboard=[
             [InlineKeyboardButton(
                 text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ",
                 url=f"https://t.me/{BOT_ID}?start={lot.uuid}"
             )]
         ]
        )
    )