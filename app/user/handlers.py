import re
import types

from aiogram import F, Router, types

from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.db.models import LotStatus
from app.middlewares import UserDBCheckMiddleware, UserBanCheckMiddleware, UserBanCheckMiddlewareCB

import app.db.requests as rq

from app.filters import IsUser

import app.user.keyboards as kb

from config import PAYMENTS_TOKEN, CHANNEL_ID

from app.user.handler_functions import bid_lot

user_router = Router()

user_router.message.outer_middleware(UserDBCheckMiddleware())
user_router.message.outer_middleware(UserBanCheckMiddleware())
user_router.message.outer_middleware(UserBanCheckMiddlewareCB())

class DepositBalance(StatesGroup):
    number_stars = State()

class CreateLot(StatesGroup):
    photo = State()
    starter_price = State()
    blitz_price = State()
    completion_time = State()

@user_router.message(IsUser(), CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    lot_uuid = command.args
    if lot_uuid:
        lot = await rq.get_lot_by_uuid(lot_uuid)
        await message.answer_photo(photo=lot.photo_id,
                                   caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot.starter_price}üåü\n"
                                           f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {lot.real_price}üåü\n"
                                           f"–°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {lot.real_price + 1}üåü\n"
                                           f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {lot.moment_buy_price}üåü\n"
                                           f"–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è: {lot.expired_at}\n"
                                           f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {lot.seller}\n",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton(text='–ü–µ—Ä–µ–±–∏—Ç—å —Å—Ç–∞–≤–∫—É(+1)',
                                                             callback_data=f'bid_1_{lot.id}')],
                                       [InlineKeyboardButton(text='5', callback_data=f'bid_5_{lot.id}'),
                                        InlineKeyboardButton(text="10", callback_data=f'bid_10_{lot.id}'),
                                        InlineKeyboardButton(text="25", callback_data=f'bid_25_{lot.id}')],
                                       [InlineKeyboardButton(text="50", callback_data=f'bid_50_{lot.id}'),
                                        InlineKeyboardButton(text="100", callback_data=f'bid_100_{lot.id}')],
                                       [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞ {lot.moment_buy_price}üåü",
                                                             callback_data=f'buy_now_{lot.id}')]
                                   ])
                                   )
    else:
        user = await rq.get_user_data(message.from_user.id)
        if user.is_new:
            await message.answer("üëã–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –ê—É–∫—Ü–∏–æ–Ω Saharok's/richa\n\n"
                                      "üïí–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º: \n"
                                      "8:00 - 23:00–º—Å–∫, –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 - 10 –º–∏–Ω—É—Ç!\n\n"
                                      "üìå–ó–∞–∫–∞–∑—ã, –ø—Ä–∏—à–µ–¥—à–∏–µ —Å 23:00 –¥–æ 8:00, –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Ç—Ä–æ–º, –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏.",
                             reply_markup=kb.main_menu)
            await rq.set_new_user(message.from_user.id)
        else:
            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã  —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é. üõ†",
                                 reply_markup=kb.main_menu)

@user_router.message(IsUser(), Command("menu"))
async def menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã  —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é. üõ†", reply_markup=kb.main_menu)

@user_router.message(IsUser(), F.text == "ü™™–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user = await rq.get_user_data(message.from_user.id)
    await message.answer(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {message.from_user.username} \n"
                         f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤:  {user.lots} \n"
                         f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:  {user.balance}üåü \n",
                         reply_markup=kb.profile_menu)

@user_router.message(IsUser(), F.text == "üõ†Ô∏è–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def create_lot(message: Message):
    await message.answer("‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚úÖ",
                         reply_markup=kb.tech_bot_menu)

@user_router.message(IsUser(), F.text == "–í—ã–≤–µ—Å—Ç–∏ üåü")
async def create_lot(message: Message):
    await message.answer("‚öô –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                         reply_markup=kb.withdraw_bot_menu)

@user_router.message(IsUser(), F.text == "üé´–°–æ–∑–¥–∞—Ç—å –ª–æ—Ç")
async def create_lot(message: Message, state: FSMContext):
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É(–≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–æ–∂–Ω–æ –∑–∞–º–∞–∑–∞—Ç—å). üéÅ")
    await state.set_state(CreateLot.photo)

@user_router.message(IsUser(), F.photo, CreateLot.photo)
async def set_lots_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await state.set_state(CreateLot.starter_price)
    await message.answer("üåü –í–≤–µ–¥–∏—Ç–µ  —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö, üåüÔ∏è=1,65‚ÇΩ.")

@user_router.message(IsUser(), CreateLot.starter_price)
async def set_lots_photo(message: Message, state: FSMContext):
    if message.text and message.text.isdigit() and int(message.text) > 0:
        await state.update_data(starter_price=int(message.text))
        await state.set_state(CreateLot.blitz_price)
        await message.answer("üåü –í–≤–µ–¥–∏—Ç–µ  –±–ª–∏—Ç—Ü —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö(—Ü–µ–Ω–∞ –∑–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç), üåüÔ∏è=1,65‚ÇΩ.")
    else:
        await message.answer("üåü –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–æ–ª—å—à–µ–µ –Ω—É–ª—è.")

@user_router.message(IsUser(), CreateLot.blitz_price)
async def set_lots_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text and message.text.isdigit() and int(message.text) > data['starter_price']:
        await state.update_data(blitz_price=int(message.text))
        await state.set_state(CreateLot.completion_time)
        await message.answer("üïí –í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –ª–æ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –≤—ã–∫—É–ø—è—Ç. üïí",
                         reply_markup=kb.lot_times_menu)
    else:
        await message.answer("üåü –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–æ–ª—å—à–µ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã.")

# @user_router.message(IsUser(), CreateLot.completion_time)
# async def set_lots_photo(message: Message, state: FSMContext):
#     await state.update_data(hours=int(message.text))
#     data = await state.get_data()
#     await rq.set_lot(tg_id=message.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'], photo_id=data['photo_id'])
#     lot = await rq.get_lot_data_by_photo_id(data['photo_id'])
#     await message.answer_photo(photo=data['photo_id'],
#                                caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
#                                        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {lot.expired_at}\n"
#                                        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {message.from_user.username}\n"
#                                )
#     await message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
#     await state.clear()

@user_router.callback_query(IsUser(), F.data == "one_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours = 1)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'], pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                                   caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                           f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                           f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                           f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                                   )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()

@user_router.callback_query(IsUser(), F.data == "two_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours = 2)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'], pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                                   caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                           f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                           f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                           f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                                   )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "four_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=4)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "eight_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=8)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "ten_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=10)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "twelve_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=12)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "twenty_four_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=24)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "forty_eight_hour", CreateLot.completion_time)
async def set_lot(cb: CallbackQuery, state: FSMContext):
    await state.update_data(hours=48)
    data = await state.get_data()
    await rq.set_lot(tid=cb.from_user.id, starter_price=data['starter_price'], hours_exp=data['hours'],
                     pid=data['photo_id'], blitz_price=data['blitz_price'])
    await cb.answer("")
    await cb.message.delete()
    await cb.message.answer_photo(photo=data['photo_id'],
                          caption=f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['starter_price']}üåü\n"
                                  f"–ë–ª–∏—Ç—Ü —Ü–µ–Ω–∞: {data['blitz_price']}üåü\n"
                                  f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–æ—Ç–∞(–≤ —á–∞—Å–∞—Ö): {data['hours']}\n"
                                  f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {cb.from_user.username}\n"
                          )
    await cb.message.answer("üìù –í–∞—à –ª–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üìù")
    await state.clear()


@user_router.callback_query(IsUser(), F.data == "deposit_balance")
async def deposit_balance(cb: CallbackQuery, state: FSMContext):
    await cb.answer("")
    await state.set_state(DepositBalance.number_stars)
    await cb.message.edit_text("‚úç –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥,–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å. üí∞")

@user_router.message(IsUser(), DepositBalance.number_stars)
async def deposit_balance_s(message: Message, state: FSMContext):
    if message.text and message.text.isdigit() and int(message.text) >= 50 and int(message.text) <= 10000:
        await state.update_data(stars=int(message.text))
        data = await state.get_data()
        await message.answer(f"–°–µ–π—á–∞—Å –º—ã –ø—Ä–∏—à–ª—ë–º —Å—á–µ—Ç, –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {data['stars']}üåü")
        await state.clear()
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ {data['stars']}üåü",
            provider_token=PAYMENTS_TOKEN,
            currency="rub",
            photo_url="https://digital-basket-01.wbbasket.ru/vol6/124/a0516b93ae5e8a32ac14e4fc265b575f/1280.jpg",
            photo_width=800,
            photo_height=650,
            photo_size=800,
            payload=f"deposit_balance_{data['stars']}",
            prices=[types.LabeledPrice(label=f"–ü–æ–∫—É–ø–∫–∞ {data['stars']}üåü", amount=int(data['stars']*1.65*100))],
            need_email=True,
            send_email_to_provider=True
        )
    else:
        await message.answer("üìå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 50, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 15 000 üìå")

@user_router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pcq: PreCheckoutQuery):
    await pcq.bot.answer_pre_checkout_query(pcq.id, ok=True)

@user_router.message(IsUser(), F.successful_payment)
async def process_suc_payment(message: Message):
    stars = int(message.successful_payment.invoice_payload.split("_")[-1])
    await rq.deposit_balance(tg_id=message.from_user.id, stars=stars)
    await message.answer(f"üéä –í–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {stars}üåüÔ∏è!")

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_1_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=1, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_5_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=5, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_10_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=10, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_25_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=25, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_50_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=50, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

@user_router.callback_query(IsUser(), lambda cb: re.match(r"^bid_100_\d+$", cb.data))
async def outbid_bid_1(cb: CallbackQuery):
    lot_id = int(cb.data.split("_")[-1])
    lot = await rq.get_lot_data(lot_id)
    await bid_lot(lot=lot, bid=100, lot_id=lot_id, cb=cb, user_id=cb.from_user.id)

